# Eliminación de columnas que no se utilizarán
base1ralimpieza = base.drop(["ESTU_TIPODOCUMENTO","PERIODO","ESTU_CONSECUTIVO","ESTU_ESTUDIANTE","COLE_CODIGO_ICFES","COLE_COD_DANE_ESTABLECIMIENTO","COLE_NOMBRE_ESTABLECIMIENTO","COLE_COD_DANE_SEDE","COLE_NOMBRE_SEDE","COLE_SEDE_PRINCIPAL","COLE_COD_MCPIO_UBICACION","COLE_COD_DEPTO_UBICACION","ESTU_COD_MCPIO_PRESENTACION","ESTU_MCPIO_PRESENTACION","ESTU_DEPTO_PRESENTACION","ESTU_COD_DEPTO_PRESENTACION",
                             "ESTU_ESTADOINVESTIGACION","ESTU_PRIVADO_LIBERTAD","COLE_BILINGUE","COLE_GENERO","COLE_CALENDARIO","ESTU_COD_RESIDE_DEPTO","ESTU_PAIS_RESIDE","ESTU_COD_RESIDE_MCPIO",'ESTU_NACIONALIDAD',"PUNT_INGLES","ESTU_FECHANACIMIENTO"], axis=1)
                             
# Limpieza de datos NAN
base1ralimpieza['ESTU_GENERO'] = base1ralimpieza['ESTU_GENERO'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_TIENEETNIA'] = base1ralimpieza['ESTU_TIENEETNIA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_DEPTO_RESIDE'] = base1ralimpieza['ESTU_DEPTO_RESIDE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_MCPIO_RESIDE'] = base1ralimpieza['ESTU_MCPIO_RESIDE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_ESTRATOVIVIENDA'] = base1ralimpieza['FAMI_ESTRATOVIVIENDA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_PERSONASHOGAR'] = base1ralimpieza['FAMI_PERSONASHOGAR'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_CUARTOSHOGAR'] = base1ralimpieza['FAMI_CUARTOSHOGAR'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_EDUCACIONPADRE'] = base1ralimpieza['FAMI_EDUCACIONPADRE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_EDUCACIONMADRE'] = base1ralimpieza['FAMI_EDUCACIONMADRE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TRABAJOLABORPADRE'] = base1ralimpieza['FAMI_TRABAJOLABORPADRE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TRABAJOLABORMADRE'] = base1ralimpieza['FAMI_TRABAJOLABORMADRE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENEINTERNET'] = base1ralimpieza['FAMI_TIENEINTERNET'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENESERVICIOTV'] = base1ralimpieza['FAMI_TIENESERVICIOTV'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENECOMPUTADOR'] = base1ralimpieza['FAMI_TIENECOMPUTADOR'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENELAVADORA'] = base1ralimpieza['FAMI_TIENELAVADORA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENEHORNOMICROOGAS'] = base1ralimpieza['FAMI_TIENEHORNOMICROOGAS'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENEAUTOMOVIL'] = base1ralimpieza['FAMI_TIENEAUTOMOVIL'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENEMOTOCICLETA'] = base1ralimpieza['FAMI_TIENEMOTOCICLETA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_TIENECONSOLAVIDEOJUEGOS'] = base1ralimpieza['FAMI_TIENECONSOLAVIDEOJUEGOS'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_NUMLIBROS'] = base1ralimpieza['FAMI_NUMLIBROS'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_COMELECHEDERIVADOS'] = base1ralimpieza['FAMI_COMELECHEDERIVADOS'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_COMECARNEPESCADOHUEVO'] = base1ralimpieza['FAMI_COMECARNEPESCADOHUEVO'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_COMECEREALFRUTOSLEGUMBRE'] = base1ralimpieza['FAMI_COMECEREALFRUTOSLEGUMBRE'].replace(np.nan, "Sin respuesta")
base1ralimpieza['FAMI_SITUACIONECONOMICA'] = base1ralimpieza['FAMI_SITUACIONECONOMICA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_DEDICACIONLECTURADIARIA'] = base1ralimpieza['ESTU_DEDICACIONLECTURADIARIA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_DEDICACIONINTERNET'] = base1ralimpieza['ESTU_DEDICACIONINTERNET'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_HORASSEMANATRABAJA'] = base1ralimpieza['ESTU_HORASSEMANATRABAJA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_TIPOREMUNERACION'] = base1ralimpieza['ESTU_TIPOREMUNERACION'].replace(np.nan, "Sin respuesta")
base1ralimpieza['COLE_CARACTER'] = base1ralimpieza['COLE_CARACTER'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_TIENEETNIA'] = base1ralimpieza['ESTU_TIENEETNIA'].replace(np.nan, "Sin respuesta")
base1ralimpieza['ESTU_INSE_INDIVIDUAL'] = base1ralimpieza['ESTU_INSE_INDIVIDUAL'].replace(np.nan, base1ralimpieza['ESTU_INSE_INDIVIDUAL'].mean())
base1ralimpieza['PUNT_GLOBAL'] = base1ralimpieza['PUNT_GLOBAL'].replace(np.nan, base1ralimpieza['PUNT_GLOBAL'].mean())
base1ralimpieza['ESTU_NSE_INDIVIDUAL'] = base1ralimpieza['ESTU_NSE_INDIVIDUAL'].replace(np.nan, base1ralimpieza['ESTU_NSE_INDIVIDUAL'].mean())
base1ralimpieza['ESTU_NSE_ESTABLECIMIENTO'] = base1ralimpieza['ESTU_NSE_ESTABLECIMIENTO'].replace(np.nan, base1ralimpieza['ESTU_NSE_ESTABLECIMIENTO'].mean())
base1ralimpieza['Region'] = base1ralimpieza['Region'].replace(np.nan, "Sin respuesta")

# Eliminación de más variables que no se utilizarán en la construcción de modelos
baseclasificacion=base1ralimpieza
baseclasificacion = baseclasificacion.drop(["ESTU_MCPIO_RESIDE",'ESTU_GENERACION-E',"ESTU_DEPTO_RESIDE",'COLE_AREA_UBICACION', 'COLE_MCPIO_UBICACION','COLE_DEPTO_UBICACION',
                                            "PUNT_LECTURA_CRITICA","PERCENTIL_LECTURA_CRITICA",
       "DESEMP_LECTURA_CRITICA", "PUNT_MATEMATICAS", "PERCENTIL_MATEMATICAS",
       "DESEMP_MATEMATICAS", "PUNT_C_NATURALES", "PERCENTIL_C_NATURALES",
       "DESEMP_C_NATURALES", "PUNT_SOCIALES_CIUDADANAS",
       "PERCENTIL_SOCIALES_CIUDADANAS", "DESEMP_SOCIALES_CIUDADANAS",
       "PERCENTIL_INGLES", "PERCENTIL_GLOBAL", 
       "ESTU_INSE_INDIVIDUAL", "ESTU_NSE_ESTABLECIMIENTO", "ESTU_NSE_INDIVIDUAL","DESEMP_INGLES", "Año_Nacimiento"],axis=1)

# Creación de variables dummies para las variables categóricas
baseclasificacion=pd.get_dummies(baseclasificacion, drop_first=True)

# Función para generar terciles de la variable objetivo (puntaje global en prueba Saber 11)
print(250+50*norm.ppf(0.33))
print(250+50*norm.ppf(0.67))

# Función para clasificar la variable objetivo acorde a los terciles obtenidos
def division_puntaje(x):
  if x >= 272:
    return "Superior"
  elif x > 228 and x < 272:
    return "Medio"
  elif x <= 228:
    return "Bajo"
    
# Aplicación de la función a la variable del dataframe
puntajes_transformados =baseclasificacion ['PUNT_GLOBAL'].apply(division_puntaje)
baseclasificacion['GLOBAL_transformados']= puntajes_transformados
baseclasificacion = baseclasificacion.drop(["PUNT_GLOBAL"],axis=1)

# Codificación de la variable objetivo
base_arbol = baseclasificacion
base_arbol['GLOBAL_transformados'] = base_arbol['GLOBAL_transformados'].replace(['Superior','Medio','Bajo'],['2','1','0'])
base_arbol['GLOBAL_transformados'] = base_arbol['GLOBAL_transformados'].astype(object).astype(float)







